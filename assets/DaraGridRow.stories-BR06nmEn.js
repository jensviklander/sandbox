import{j as c}from"./jsx-runtime-DEdD30eg.js";import{D as R}from"./DataGridRow-DVUHW0aX.js";import"./index-RYns6xqu.js";import"./DataGridCell-DX3Kx3Mt.js";import"./IconButton-DFJlCFJO.js";import"./Icon-OfwyNSNm.js";import"./Checkbox-BARkcREK.js";const a=[{id:"name",header:"Name",accessorKey:"name",type:"string",width:160},{id:"age",header:"Age",accessorKey:"age",type:"number",width:80},{id:"profession",header:"Profession",accessorKey:"profession",type:"string"}],j={title:"Organisms/DataGrid/Molecules/DataGridRow",component:R,parameters:{docs:{description:{component:"The DataGridRow component renders a row of data in the DataGrid. It supports selecting rows, displaying cell data, and handling delete actions."}}},argTypes:{rowData:{control:!1,description:"The data for a specific row, displayed in the cells"},columns:{control:!1},selectable:{control:"boolean",description:"Determines if the row should have a checkbox for selection"},isSelected:{control:"boolean",description:"Indicates if the row is currently selected"},onDeleteRow:{control:!1,description:"Callback triggered when the delete button is clicked"},onSelectRow:{control:!1,description:"Callback triggered when the row selection checkbox is clicked"},showDeleteButton:{control:"boolean",description:"Determines if the delete button is shown for the row"},rowIndex:{control:!1,description:"The index of the row in the grid"}}},n={id:"1",name:"John Doe",age:30,profession:"Architect"},l=e=>c.jsx("table",{children:c.jsx("tbody",{children:c.jsx(R,{...e})})}),o=l.bind({});o.args={rowData:n,columns:a,rowIndex:0,selectable:!1,showDeleteButton:!0,onDeleteRow:e=>console.log(`Delete row with ID: ${e}`)};const t=l.bind({});t.args={rowData:n,columns:a,rowIndex:1,selectable:!0,isSelected:!1,showDeleteButton:!0,onDeleteRow:e=>console.log(`Delete row with ID: ${e}`),onSelectRow:e=>console.log(`Row selected: ${e}`)};const r=l.bind({});r.args={rowData:n,columns:a,rowIndex:2,selectable:!1,showDeleteButton:!0,onDeleteRow:e=>console.log(`Delete row with ID: ${e}`)};const s=l.bind({});s.args={rowData:n,columns:a,rowIndex:3,selectable:!0,isSelected:!0,showDeleteButton:!0,onDeleteRow:e=>console.log(`Delete row with ID: ${e}`),onSelectRow:e=>console.log(`Row selected: ${e}`)};var i,d,p;o.parameters={...o.parameters,docs:{...(i=o.parameters)==null?void 0:i.docs,source:{originalSource:`args => <table>
    <tbody>
      <DataGridRow {...args} />
    </tbody>
  </table>`,...(p=(d=o.parameters)==null?void 0:d.docs)==null?void 0:p.source}}};var w,b,m;t.parameters={...t.parameters,docs:{...(w=t.parameters)==null?void 0:w.docs,source:{originalSource:`args => <table>
    <tbody>
      <DataGridRow {...args} />
    </tbody>
  </table>`,...(m=(b=t.parameters)==null?void 0:b.docs)==null?void 0:m.source}}};var h,D,u;r.parameters={...r.parameters,docs:{...(h=r.parameters)==null?void 0:h.docs,source:{originalSource:`args => <table>
    <tbody>
      <DataGridRow {...args} />
    </tbody>
  </table>`,...(u=(D=r.parameters)==null?void 0:D.docs)==null?void 0:u.source}}};var g,f,y;s.parameters={...s.parameters,docs:{...(g=s.parameters)==null?void 0:g.docs,source:{originalSource:`args => <table>
    <tbody>
      <DataGridRow {...args} />
    </tbody>
  </table>`,...(y=(f=s.parameters)==null?void 0:f.docs)==null?void 0:y.source}}};const T=["Default","Selectable","WithDeleteButton","SelectableAndDeletable"];export{o as Default,t as Selectable,s as SelectableAndDeletable,r as WithDeleteButton,T as __namedExportsOrder,j as default};
