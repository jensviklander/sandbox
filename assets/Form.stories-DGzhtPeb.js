import{j as s}from"./jsx-runtime-DEdD30eg.js";import{r as O}from"./index-RYns6xqu.js";import{I as q}from"./InputGroup-C0FItITX.js";import{C}from"./CheckboxGroup-DT0hGWpS.js";import{B as A}from"./Button-D6nhreQt.js";import{v as P}from"./v4-CQkTLCs1.js";import"./Label-DdGI5c9p.js";import"./Input-C6W6lony.js";import"./Checkbox-CmKp1B3M.js";const V="_formContainer_9mgml_1",W="_buttonWrapper_9mgml_8",E={formContainer:V,buttonWrapper:W},g=({fields:t,onSubmit:o,buttonText:a})=>{const n=t.reduce((e,r)=>(e[r.name]=r.defaultValue||(r.type==="checkbox"?!1:""),e),{}),[i,y]=O.useState(n),[d,b]=O.useState({}),l=(e,r)=>{y(c=>({...c,[e]:r})),b(c=>{const{[e]:m,...h}=c;return h})},_=()=>{const e={};return t.forEach(r=>{r.required&&!i[r.name]&&(e[r.name]=`${r.label} is required`)}),b(e),Object.keys(e).length===0},f=e=>{e.preventDefault(),_()&&o(i)};return s.jsxs("form",{onSubmit:f,className:E.formContainer,children:[t.map(e=>e.type==="checkbox"?s.jsx("div",{children:s.jsx(C,{id:e.name,labelText:e.label,checked:i[e.name],onChange:r=>l(e.name,r),required:e.required,error:d[e.name]})},e.name):s.jsx("div",{children:s.jsx(q,{id:e.name,labelText:e.label,type:e.type,placeholder:e.placeholder,onChange:r=>l(e.name,r),required:e.required,error:d[e.name]})},e.name)),s.jsx("div",{className:E.buttonWrapper,children:s.jsx(A,{id:"submit-button",type:"submit",ariaLabel:"Submit form",children:a})})]})};g.__docgenInfo={description:"",methods:[],displayName:"Form"};const{addons:k}=__STORYBOOK_MODULE_PREVIEW_API__,{ImplicitActionsDuringRendering:B}=__STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS__,{global:x}=__STORYBOOK_MODULE_GLOBAL__;var N="storybook/actions",L=`${N}/action-event`,K={depth:10,clearOnStoryChange:!0,limit:50},D=(t,o)=>{let a=Object.getPrototypeOf(t);return!a||o(a)?a:D(a,o)},U=t=>!!(typeof t=="object"&&t&&D(t,o=>/^Synthetic(?:Base)?Event$/.test(o.constructor.name))&&typeof t.persist=="function"),Y=t=>{if(U(t)){let o=Object.create(t.constructor.prototype,Object.getOwnPropertyDescriptors(t));o.persist();let a=Object.getOwnPropertyDescriptor(o,"view"),n=a==null?void 0:a.value;return typeof n=="object"&&(n==null?void 0:n.constructor.name)==="Window"&&Object.defineProperty(o,"view",{...a,value:Object.create(n.constructor.prototype)}),o}return t},M=()=>typeof crypto=="object"&&typeof crypto.getRandomValues=="function"?P():Date.now().toString(36)+Math.random().toString(36).substring(2);function F(t,o={}){let a={...K,...o},n=function(...i){var e,r;if(o.implicit){let c=(e="__STORYBOOK_PREVIEW__"in x?x.__STORYBOOK_PREVIEW__:void 0)==null?void 0:e.storyRenders.find(m=>m.phase==="playing"||m.phase==="rendering");if(c){let m=!((r=window==null?void 0:window.FEATURES)!=null&&r.disallowImplicitActionsInRenderV8),h=new B({phase:c.phase,name:t,deprecated:m});if(m)console.warn(h);else throw h}}let y=k.getChannel(),d=M(),b=5,l=i.map(Y),_=i.length>1?l:l[0],f={id:d,count:0,data:{name:t,args:_},options:{...a,maxDepth:b+(a.depth||3),allowFunction:a.allowFunction||!1}};y.emit(L,f)};return n.isAction=!0,n.implicit=o.implicit,n}const te={title:"Organisms/Form",component:g,parameters:{docs:{description:{component:"The Form component allows for a dynamic and reusable form structure that supports various input types like text, email, password, and checkbox. It validates required fields and handles form submissions."}}},argTypes:{buttonText:{control:"text",description:"Text to be displayed on the submit button"},fields:{control:"object",description:"Array of field objects defining the form fields and their properties"},onSubmit:{action:"submitted",description:"Callback function to handle form submission"}}},I=t=>s.jsx(g,{...t}),p=I.bind({});p.args={buttonText:"Submit",fields:[{name:"username",label:"Username",type:"text",placeholder:"Enter your username",required:!0},{name:"email",label:"Email",type:"email",placeholder:"Enter your email",required:!0},{name:"password",label:"Password",type:"password",placeholder:"Enter your password",required:!0},{name:"acceptTerms",label:"Accept Terms and Conditions",type:"checkbox",required:!0,defaultValue:!1}],onSubmit:F("Form Submitted")};const u=I.bind({});u.args={buttonText:"Register",fields:[{name:"fullName",label:"Full Name",type:"text",placeholder:"Enter your full name",required:!1},{name:"email",label:"Email",type:"email",placeholder:"Enter your email",required:!0},{name:"password",label:"Password",type:"password",placeholder:"Enter a password",required:!0},{name:"newsletter",label:"Subscribe to Newsletter",type:"checkbox",defaultValue:!0}],onSubmit:F("Form Submitted with Optional Fields")};var S,w,j;p.parameters={...p.parameters,docs:{...(S=p.parameters)==null?void 0:S.docs,source:{originalSource:"args => <Form {...args} />",...(j=(w=p.parameters)==null?void 0:w.docs)==null?void 0:j.source}}};var R,T,v;u.parameters={...u.parameters,docs:{...(R=u.parameters)==null?void 0:R.docs,source:{originalSource:"args => <Form {...args} />",...(v=(T=u.parameters)==null?void 0:T.docs)==null?void 0:v.source}}};const re=["Default","WithOptionalFields"];export{p as Default,u as WithOptionalFields,re as __namedExportsOrder,te as default};
